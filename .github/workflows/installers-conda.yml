on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
    paths:
      - 'installers-conda/**'
      - '.github/workflows/installers-conda.yml'
      - 'requirements/*.yml'
      - 'MANIFEST.in'
      - '**.bat'
      - '**.py'
      - '**.sh'
      - '!**.md'
      - '!installers/**'
      - '!.github/workflows/installer-win.yml'
      - '!.github/workflows/installer-macos.yml'

  release:
    types:
      - created

  push:
    tags:
      - v*pre*

concurrency:
  group: installers-conda-${{ github.ref }}
  cancel-in-progress: true

name: Create conda-based installers for Windows, macOS, and Linux

env:
  IS_RELEASE: ${{ github.event_name == 'release' }}
  IS_PRE: ${{ (github.event_name == 'push' && github.ref_type == 'tag') || (github.event.action == 'labeled' && github.event.label.name == 'build-installer-artifacts') }}
  DO_NOT_RUN: ${{ github.event.action == 'labeled' && github.event.label.name != 'build-installer-artifacts' }}
  IS_STANDARD_PR: ${{ contains(fromJSON('["opened", "reopened", "synchronize"]'), github.event.pull_request.action) }}

jobs:
  build-noarch-pkgs:
    name: Build ${{ matrix.pkg }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: ["python-lsp-server", "qtconsole"]
        python-version: ["3.9"]
    defaults:
      run:
        shell: bash -l {0}
    env:
      DISTDIR: ${{ github.workspace }}/installers-conda/dist
      pkg: ${{ matrix.pkg }}
      artifact_name: ${{ matrix.pkg }}_${{ matrix.python-version }}

    steps:
      - name: Test
        run: printenv

  build-matrix:
    name: Determine Build Matrix
    runs-on: ubuntu-latest
    outputs:
      target_platform: ${{ steps.build-matrix.outputs.target_platform }}
      include: ${{ steps.build-matrix.outputs.include }}
      python_version: ${{ steps.build-matrix.outputs.python_version }}
    steps:
    - id: build-matrix
      run: |
        target_platform="'osx-64', 'linux-64'"
        include="\
        {'os': 'macos-11', 'target-platform': 'osx-64'},\
        {'os': 'ubuntu-latest', 'target-platform': 'linux-64'}\
        "
        python_version="'3.9'"

        if [[ ${IS_STANDARD_PR} == 'true' ]]; then
            target_platform=$target_platform", 'win-64'"
            include=$include",{'os': 'windows-latest', 'target-platform': 'win-64'}"
        fi

        echo "target_platform=[$target_platform]" >> $GITHUB_OUTPUT
        echo "include=[$include]" >> $GITHUB_OUTPUT
        echo "python_version=[$python_version]" >> $GITHUB_OUTPUT

  build-installers:
    name: Build installer for ${{ matrix.target-platform }} Python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs:
      - build-matrix
      - build-noarch-pkgs
    strategy:
      matrix:
        target-platform: ${{fromJson(needs.build-matrix.outputs.target_platform)}}
        python-version: ${{fromJson(needs.build-matrix.outputs.python_version)}}
        include: ${{fromJson(needs.build-matrix.outputs.include)}}
    defaults:
      run:
        shell: bash -l {0}
    env:
      DISTDIR: ${{ github.workspace }}/installers-conda/dist
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_INSTALLER_CERTIFICATE: ${{ secrets.MACOS_INSTALLER_CERTIFICATE }}
      APPLICATION_PWD: ${{ secrets.APPLICATION_PWD }}
      CONSTRUCTOR_TARGET_PLATFORM: ${{ matrix.target-platform }}
      STATUS: ${{ needs.build-noarch-pkgs.result }}
      MAT_STATUS: ${{ needs.build-matrix.result }}

    steps:
      - name: Test
        run: printenv

  remove_label:
    runs-on: ubuntu-latest
    steps:
      - name: Test
        run: printenv
