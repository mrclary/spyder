From aaf106966bf500d5c2d6200e7b9f851bfb28c767 Mon Sep 17 00:00:00 2001
From: Ryan Clary <9618975+mrclary@users.noreply.github.com>
Date: Mon, 12 Sep 2022 23:56:56 -0700
Subject: [PATCH 1/2] Revise usage of running_in_mac_app

---
 spyder/app/restart.py                         | 14 +++-----
 spyder/app/utils.py                           |  1 +
 spyder/config/base.py                         | 36 +++++--------------
 .../providers/languageserver/provider.py      |  6 +---
 .../ipythonconsole/utils/kernelspec.py        |  2 ++
 .../plugins/profiler/widgets/main_widget.py   |  7 +---
 spyder/plugins/pylint/main_widget.py          |  7 +---
 spyder/utils/programs.py                      |  5 +--
 spyder/utils/pyenv.py                         |  2 +-
 9 files changed, 22 insertions(+), 58 deletions(-)

diff --git a/spyder/app/restart.py b/spyder/app/restart.py
index b85dd03cb..6bc566e89 100644
--- a/spyder/app/restart.py
+++ b/spyder/app/restart.py
@@ -27,7 +27,7 @@
 
 # Local imports
 from spyder.app.utils import create_splash_screen
-from spyder.config.base import _, running_in_mac_app
+from spyder.config.base import _
 from spyder.utils.image_path_manager import get_image_path
 from spyder.utils.encoding import to_unicode
 from spyder.utils.qthelpers import qapplication
@@ -228,16 +228,12 @@ def main():
         args_reset = ['--reset']
 
     # Build the base command
-    if running_in_mac_app(sys.executable):
-        exe = env['EXECUTABLEPATH']
-        command = [f'"{exe}"']
+    if is_bootstrap:
+        script = osp.join(spyder_dir, 'bootstrap.py')
     else:
-        if is_bootstrap:
-            script = osp.join(spyder_dir, 'bootstrap.py')
-        else:
-            script = osp.join(spyder_dir, 'spyder', 'app', 'start.py')
+        script = osp.join(spyder_dir, 'spyder', 'app', 'start.py')
 
-        command = [f'"{sys.executable}"', f'"{script}"']
+    command = [f'"{sys.executable}"', f'"{script}"']
 
     # Adjust the command and/or arguments to subprocess depending on the OS
     shell = not IS_WINDOWS
diff --git a/spyder/app/utils.py b/spyder/app/utils.py
index 254df98b4..700ec6d13 100644
--- a/spyder/app/utils.py
+++ b/spyder/app/utils.py
@@ -311,6 +311,7 @@ def create_window(WindowClass, app, splash, options, args):
         QCoreApplication.setAttribute(Qt.AA_DontShowIconsInMenus, True)
 
     # Open external files with our Mac app
+    # ??? Do we need this?
     if running_in_mac_app():
         app.sig_open_external_file.connect(main.open_external_file)
         app._has_started = True
diff --git a/spyder/config/base.py b/spyder/config/base.py
index c0b9a4b29..204a6d72c 100644
--- a/spyder/config/base.py
+++ b/spyder/config/base.py
@@ -549,42 +549,24 @@ def translate_gettext(x):
 #==============================================================================
 # Mac application utilities
 #==============================================================================
-def running_in_mac_app(pyexec=None):
+def running_in_mac_app(pyexec=sys.executable):
     """
-    Check if Python executable is located inside a standalone Mac app.
+    Check if Spyder is running as a macOS bundle app.
+    Checks for SPYDER_APP environment variable to determine this.
 
-    If no executable is provided, the default will check `sys.executable`, i.e.
-    whether Spyder is running from a standalone Mac app.
-
-    This is important for example for the single_instance option and the
-    interpreter status in the statusbar.
+    If python executable is provided, checks if it is the same as the macOS
+    bundle app environment executable.
     """
-    if pyexec is None:
-        pyexec = sys.executable
-
-    bpath = get_mac_app_bundle_path()
+    # Spyder is macOS app
+    mac_app = os.environ.get('SPYDER_APP') is not None
 
-    if bpath and pyexec == osp.join(bpath, 'Contents/MacOS/python'):
+    if mac_app and pyexec == sys.executable:
+        # executable is macOS app
         return True
     else:
         return False
 
 
-def get_mac_app_bundle_path():
-    """
-    Return the full path to the macOS app bundle. Otherwise return None.
-
-    EXECUTABLEPATH environment variable only exists if Spyder is a macOS app
-    bundle. In which case it will always end with
-    "/<app name>.app/Conents/MacOS/Spyder".
-    """
-    app_exe_path = os.environ.get('EXECUTABLEPATH', None)
-    if sys.platform == "darwin" and app_exe_path:
-        return osp.dirname(osp.dirname(osp.dirname(osp.abspath(app_exe_path))))
-    else:
-        return None
-
-
 # =============================================================================
 # Micromamba
 # =============================================================================
diff --git a/spyder/plugins/completion/providers/languageserver/provider.py b/spyder/plugins/completion/providers/languageserver/provider.py
index e8959e13a..199a82b08 100644
--- a/spyder/plugins/completion/providers/languageserver/provider.py
+++ b/spyder/plugins/completion/providers/languageserver/provider.py
@@ -23,8 +23,7 @@
 # Local imports
 from spyder.api.config.decorators import on_conf_change
 from spyder.utils.installers import InstallerPylspError
-from spyder.config.base import (_, get_conf_path, running_under_pytest,
-                                running_in_mac_app)
+from spyder.config.base import _, get_conf_path, running_under_pytest
 from spyder.config.lsp import PYTHON_CONFIG
 from spyder.utils.misc import check_connection_port
 from spyder.plugins.completion.api import (SUPPORTED_LANGUAGES,
@@ -819,9 +818,6 @@ def generate_python_config(self):
         else:
             environment = self.get_conf('executable',
                                         section='main_interpreter')
-            # External interpreter cannot have PYTHONHOME
-            if running_in_mac_app():
-                env_vars.pop('PYTHONHOME', None)
 
         jedi = {
             'environment': environment,
diff --git a/spyder/plugins/ipythonconsole/utils/kernelspec.py b/spyder/plugins/ipythonconsole/utils/kernelspec.py
index 0acdce9a9..4bdc4edd8 100644
--- a/spyder/plugins/ipythonconsole/utils/kernelspec.py
+++ b/spyder/plugins/ipythonconsole/utils/kernelspec.py
@@ -187,6 +187,7 @@ def env(self):
             env_vars['SPY_RUN_CYTHON'] = True
 
         # App considerations
+        # ??? Do we need this?
         if (running_in_mac_app() or is_pynsist()):
             if default_interpreter:
                 # See spyder-ide/spyder#16927
@@ -194,6 +195,7 @@ def env(self):
                 # See spyder-ide/spyder#17552
                 env_vars['PYDEVD_DISABLE_FILE_VALIDATION'] = 1
             else:
+                # ??? Do we need this?
                 env_vars.pop('PYTHONHOME', None)
 
         # Remove this variable because it prevents starting kernels for
diff --git a/spyder/plugins/profiler/widgets/main_widget.py b/spyder/plugins/profiler/widgets/main_widget.py
index 91c411bdf..c274f5872 100644
--- a/spyder/plugins/profiler/widgets/main_widget.py
+++ b/spyder/plugins/profiler/widgets/main_widget.py
@@ -34,7 +34,7 @@
 from spyder.api.translations import get_translation
 from spyder.api.widgets.main_widget import PluginMainWidget
 from spyder.api.widgets.mixins import SpyderWidgetMixin
-from spyder.config.base import get_conf_path, running_in_mac_app
+from spyder.config.base import get_conf_path
 from spyder.plugins.variableexplorer.widgets.texteditor import TextEditor
 from spyder.py3compat import to_text_string
 from spyder.utils.misc import get_python_executable, getcwd_or_home
@@ -534,11 +534,6 @@ def start(self, wdir=None, args=None, pythonpath=None):
 
         executable = self.get_conf('executable', section='main_interpreter')
 
-        if not running_in_mac_app(executable):
-            env = self.process.processEnvironment()
-            env.remove('PYTHONHOME')
-            self.process.setProcessEnvironment(env)
-
         self.output = ''
         self.error_output = ''
         self.running = True
diff --git a/spyder/plugins/pylint/main_widget.py b/spyder/plugins/pylint/main_widget.py
index a76d6fbf9..df4f00dab 100644
--- a/spyder/plugins/pylint/main_widget.py
+++ b/spyder/plugins/pylint/main_widget.py
@@ -31,7 +31,7 @@
 from spyder.api.config.decorators import on_conf_change
 from spyder.api.translations import get_translation
 from spyder.api.widgets.main_widget import PluginMainWidget
-from spyder.config.base import get_conf_path, running_in_mac_app
+from spyder.config.base import get_conf_path
 from spyder.plugins.pylint.utils import get_pylintrc_path
 from spyder.plugins.variableexplorer.widgets.texteditor import TextEditor
 from spyder.utils.icon_manager import ima
@@ -372,11 +372,6 @@ def _start(self):
             user_profile = os.environ.get("USERPROFILE", home_dir)
             processEnvironment.insert("USERPROFILE", user_profile)
 
-        # resolve spyder-ide/spyder#14262
-        if running_in_mac_app():
-            pyhome = os.environ.get("PYTHONHOME")
-            processEnvironment.insert("PYTHONHOME", pyhome)
-
         process.setProcessEnvironment(processEnvironment)
         process.start(sys.executable, command_args)
         running = process.waitForStarted()
diff --git a/spyder/utils/programs.py b/spyder/utils/programs.py
index ccd22f9e6..56123ca9c 100644
--- a/spyder/utils/programs.py
+++ b/spyder/utils/programs.py
@@ -30,8 +30,7 @@
 import psutil
 
 # Local imports
-from spyder.config.base import (running_under_pytest, get_home_dir,
-                                running_in_mac_app)
+from spyder.config.base import running_under_pytest, get_home_dir
 from spyder.py3compat import is_text_string, to_text_string
 from spyder.utils import encoding
 from spyder.utils.misc import get_python_executable
@@ -777,8 +776,6 @@ def run_python_script_in_terminal(fname, wdir, args, interact, debug,
                                         delete=False)
         if wdir:
             f.write('cd "{}"\n'.format(wdir))
-        if running_in_mac_app(executable):
-            f.write(f'export PYTHONHOME={os.environ["PYTHONHOME"]}\n')
         if pypath is not None:
             f.write(f'export PYTHONPATH={pypath}\n')
         f.write(' '.join([executable] + p_args))
diff --git a/spyder/utils/pyenv.py b/spyder/utils/pyenv.py
index 49f894e7c..018e02130 100644
--- a/spyder/utils/pyenv.py
+++ b/spyder/utils/pyenv.py
@@ -11,7 +11,7 @@
 import os
 import os.path as osp
 
-from spyder.config.base import get_home_dir, running_in_mac_app
+from spyder.config.base import get_home_dir
 from spyder.utils.programs import find_program, run_shell_command
 
 
-- 
2.37.3


From eadd3399de480315769cae4b97a2ebc6e26013d7 Mon Sep 17 00:00:00 2001
From: Ryan Clary <9618975+mrclary@users.noreply.github.com>
Date: Mon, 12 Sep 2022 23:58:36 -0700
Subject: [PATCH 2/2] Update standalone conda executable.

---
 spyder/config/base.py                                   | 5 +++--
 spyder/plugins/ipythonconsole/scripts/conda-activate.sh | 4 ++--
 spyder/utils/conda.py                                   | 4 ++--
 3 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/spyder/config/base.py b/spyder/config/base.py
index 204a6d72c..2629026d8 100644
--- a/spyder/config/base.py
+++ b/spyder/config/base.py
@@ -573,8 +573,9 @@ def running_in_mac_app(pyexec=sys.executable):
 def get_spyder_umamba_path():
     """Return the path to the Micromamba executable bundled with Spyder."""
     if running_in_mac_app():
-        path = osp.join(osp.dirname(osp.dirname(__file__)),
-                        'bin', 'micromamba')
+        # TODO: Change to CONDA_EXE when
+        # conda-forge/conda-standalone-feedstock#45 is resolved
+        path = os.environ.get('CONDA_PYTHON_EXE')
     elif is_pynsist():
         path = osp.abspath(osp.join(osp.dirname(osp.dirname(__file__)),
                                     'bin', 'micromamba.exe'))
diff --git a/spyder/plugins/ipythonconsole/scripts/conda-activate.sh b/spyder/plugins/ipythonconsole/scripts/conda-activate.sh
index f2243cfcc..0d92d4205 100755
--- a/spyder/plugins/ipythonconsole/scripts/conda-activate.sh
+++ b/spyder/plugins/ipythonconsole/scripts/conda-activate.sh
@@ -8,8 +8,8 @@ CONDA_ENV_PYTHON=$3
 SPYDER_KERNEL_SPEC=$4
 
 # Activate kernel environment
-if [[ "$CONDA_ACTIVATE_SCRIPT" = *"micromamba" ]]; then
-    eval "$($CONDA_ACTIVATE_SCRIPT shell activate -p $CONDA_ENV_PATH)"
+if [[ "$CONDA_ACTIVATE_SCRIPT" = *"_conda.exe" ]]; then
+    eval "$($CONDA_ACTIVATE_SCRIPT shell.bash activate $CONDA_ENV_PATH)"
 else
     source $CONDA_ACTIVATE_SCRIPT $CONDA_ENV_PATH
 fi
diff --git a/spyder/utils/conda.py b/spyder/utils/conda.py
index 2c43c37dc..e8db8a4f5 100644
--- a/spyder/utils/conda.py
+++ b/spyder/utils/conda.py
@@ -73,8 +73,8 @@ def get_conda_activation_script(quote=False):
     # Use micromamba bundled with Spyder installers or find conda exe
     exe = get_spyder_umamba_path() or find_conda()
 
-    if osp.basename(exe).startswith('micromamba'):
-        # For Micromamba, use the executable
+    if osp.basename(exe) in ('micromamba.exe', '_conda.exe'):
+        # For stadalone conda, use the executable
         script_path = exe
     else:
         # Conda activation script is relative to executable
-- 
2.37.3

